numericInput(inputId='bedrooms', label='Enter bedrooms of House : ' , value = 1,min = 1, max = 9),
numericInput(inputId='bathrooms', label='Enter bathrooms of House : ', value = 1,min = 1, max =8),
numericInput(inputId='floors', label='Enter floors of House : ', value = 1,min = 1, max = 4),
numericInput(inputId='waterfront', label=' Do you want waterfront in House (Enter 0 for NO and 1 for YES) : ', value = 0,min = 0, max = 1),
numericInput(inputId='condition', label=' Enter view of house (From range  0 to 4): ', value = 0,min = 0, max = 4),
numericInput(inputId='view', label='Enter Condition of house (From range  0 to 5): ', value = 0,min = 0, max = 4),
numericInput(inputId='basement', label=' Do you want basement in House (Enter 0 for NO and 1 for YES) : ', value = 0,min = 0, max = 1),
),
mainPanel(
tags$b("Predicted Price of House"),
textOutput("Pred")
)
)
)
)
)
server <- function(input, output) {
dataset=Project_Dataset
tprice=0
tprice=as.integer(tprice)
train <- subset(dataset, select=c(price, marla, bedrooms, bathrooms, floors, waterfront, view, condition, basement))
sapply(train, function(x) sum(is.na(x)))
model <-  lm(train$price ~ ., data=train)
cor(train$marla, train$bedrooms+train$bathrooms, method='pearson')
confint(model, conf.level=0.95)
pred <- reactive({
tmarla=input$marla
tbedrooms=input$bedrooms
tbathrooms=input$bathrooms
tfloors=input$floors
twaterfront=input$waterfront
tcondition=input$condition
tview=input$view
tbasement=input$basement
test <- matrix(c(tprice,tmarla, tbedrooms, tbathrooms, tfloors, twaterfront, tview, tcondition, tbasement),ncol=9)
test <- data.frame(test)
colnames(test) <- c("price", "marla", "bedrooms", "bathrooms", "floors", "waterfront", "view", "condition", "basement")
predict(model,test)
})
output$Pred <- renderText(pred())
}
# Run the application
shinyApp(ui = ui, server = server)
library(shinythemes)
library(shinythemes)
install.packages("shinythemes")
library(shinythemes)
ui <- fluidPage(theme = shinytheme("cerulean"),
titlePanel("House Price Prediction"),
navbarPage(
"House Price Prediction",
tabPanel("Price Prediction",
sidebarLayout(
sidebarPanel(
numericInput(inputId='marla', label='Enter Marla of House : ', value = 2,min = 2, max = 50),
numericInput(inputId='bedrooms', label='Enter bedrooms of House : ' , value = 1,min = 1, max = 9),
numericInput(inputId='bathrooms', label='Enter bathrooms of House : ', value = 1,min = 1, max =8),
numericInput(inputId='floors', label='Enter floors of House : ', value = 1,min = 1, max = 4),
numericInput(inputId='waterfront', label=' Do you want waterfront in House (Enter 0 for NO and 1 for YES) : ', value = 0,min = 0, max = 1),
numericInput(inputId='condition', label=' Enter view of house (From range  0 to 4): ', value = 0,min = 0, max = 4),
numericInput(inputId='view', label='Enter Condition of house (From range  0 to 5): ', value = 0,min = 0, max = 4),
numericInput(inputId='basement', label=' Do you want basement in House (Enter 0 for NO and 1 for YES) : ', value = 0,min = 0, max = 1),
),
mainPanel(
tags$b("Predicted Price of House"),
textOutput("Pred")
)
)
)
)
)
server <- function(input, output) {
dataset=Project_Dataset
tprice=0
tprice=as.integer(tprice)
train <- subset(dataset, select=c(price, marla, bedrooms, bathrooms, floors, waterfront, view, condition, basement))
sapply(train, function(x) sum(is.na(x)))
model <-  lm(train$price ~ ., data=train)
cor(train$marla, train$bedrooms+train$bathrooms, method='pearson')
confint(model, conf.level=0.95)
pred <- reactive({
tmarla=input$marla
tbedrooms=input$bedrooms
tbathrooms=input$bathrooms
tfloors=input$floors
twaterfront=input$waterfront
tcondition=input$condition
tview=input$view
tbasement=input$basement
test <- matrix(c(tprice,tmarla, tbedrooms, tbathrooms, tfloors, twaterfront, tview, tcondition, tbasement),ncol=9)
test <- data.frame(test)
colnames(test) <- c("price", "marla", "bedrooms", "bathrooms", "floors", "waterfront", "view", "condition", "basement")
predict(model,test)
})
output$Pred <- renderText(pred())
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(theme = shinytheme("cerulean"),
navbarPage(
"House Price Prediction",
tabPanel("Price Prediction",
sidebarLayout(
sidebarPanel(
numericInput(inputId='marla', label='Enter Marla of House : ', value = 2,min = 2, max = 50),
numericInput(inputId='bedrooms', label='Enter bedrooms of House : ' , value = 1,min = 1, max = 9),
numericInput(inputId='bathrooms', label='Enter bathrooms of House : ', value = 1,min = 1, max =8),
numericInput(inputId='floors', label='Enter floors of House : ', value = 1,min = 1, max = 4),
numericInput(inputId='waterfront', label=' Do you want waterfront in House (Enter 0 for NO and 1 for YES) : ', value = 0,min = 0, max = 1),
numericInput(inputId='condition', label=' Enter view of house (From range  0 to 4): ', value = 0,min = 0, max = 4),
numericInput(inputId='view', label='Enter Condition of house (From range  0 to 5): ', value = 0,min = 0, max = 4),
numericInput(inputId='basement', label=' Do you want basement in House (Enter 0 for NO and 1 for YES) : ', value = 0,min = 0, max = 1),
),
mainPanel(
tags$b("Predicted Price of House"),
textOutput("Pred")
)
)
)
)
)
server <- function(input, output) {
dataset=Project_Dataset
tprice=0
tprice=as.integer(tprice)
train <- subset(dataset, select=c(price, marla, bedrooms, bathrooms, floors, waterfront, view, condition, basement))
sapply(train, function(x) sum(is.na(x)))
model <-  lm(train$price ~ ., data=train)
cor(train$marla, train$bedrooms+train$bathrooms, method='pearson')
confint(model, conf.level=0.95)
pred <- reactive({
tmarla=input$marla
tbedrooms=input$bedrooms
tbathrooms=input$bathrooms
tfloors=input$floors
twaterfront=input$waterfront
tcondition=input$condition
tview=input$view
tbasement=input$basement
test <- matrix(c(tprice,tmarla, tbedrooms, tbathrooms, tfloors, twaterfront, tview, tcondition, tbasement),ncol=9)
test <- data.frame(test)
colnames(test) <- c("price", "marla", "bedrooms", "bathrooms", "floors", "waterfront", "view", "condition", "basement")
predict(model,test)
})
output$Pred <- renderText(pred())
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(theme = shinytheme("cerulean"),
navbarPage(
"House Price Prediction",
tabPanel("Price Prediction",
sidebarLayout(
sidebarPanel(
numericInput(inputId='marla', label='Enter Marla of House : ', value = 2,min = 2, max = 50),
numericInput(inputId='bedrooms', label='Enter bedrooms of House : ' , value = 1,min = 1, max = 9),
numericInput(inputId='bathrooms', label='Enter bathrooms of House : ', value = 1,min = 1, max =8),
numericInput(inputId='floors', label='Enter floors of House : ', value = 1,min = 1, max = 4),
numericInput(inputId='waterfront', label=' Do you want waterfront in House (Enter 0 for NO and 1 for YES) : ', value = 0,min = 0, max = 1),
numericInput(inputId='condition', label=' Enter view of house (From range  0 to 4): ', value = 0,min = 0, max = 4),
numericInput(inputId='view', label='Enter Condition of house (From range  0 to 5): ', value = 0,min = 0, max = 4),
numericInput(inputId='basement', label=' Do you want basement in House (Enter 0 for NO and 1 for YES) : ', value = 0,min = 0, max = 1),
),
mainPanel(
tags$b("Predicted Price of House"),
verbatimTextOutput("Pred")
)
)
)
)
)
server <- function(input, output) {
dataset=Project_Dataset
tprice=0
tprice=as.integer(tprice)
train <- subset(dataset, select=c(price, marla, bedrooms, bathrooms, floors, waterfront, view, condition, basement))
sapply(train, function(x) sum(is.na(x)))
model <-  lm(train$price ~ ., data=train)
cor(train$marla, train$bedrooms+train$bathrooms, method='pearson')
confint(model, conf.level=0.95)
pred <- reactive({
tmarla=input$marla
tbedrooms=input$bedrooms
tbathrooms=input$bathrooms
tfloors=input$floors
twaterfront=input$waterfront
tcondition=input$condition
tview=input$view
tbasement=input$basement
test <- matrix(c(tprice,tmarla, tbedrooms, tbathrooms, tfloors, twaterfront, tview, tcondition, tbasement),ncol=9)
test <- data.frame(test)
colnames(test) <- c("price", "marla", "bedrooms", "bathrooms", "floors", "waterfront", "view", "condition", "basement")
predict(model,test)
})
output$Pred <- renderText(pred())
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(theme = shinytheme("cerulean"),
navbarPage(
"House Price Prediction",
tabPanel("Price Prediction",
sidebarLayout(
sidebarPanel(
numericInput(inputId='marla', label='Enter Marla of House : ', value = 2,min = 2, max = 50),
numericInput(inputId='bedrooms', label='Enter bedrooms of House : ' , value = 1,min = 1, max = 9),
numericInput(inputId='bathrooms', label='Enter bathrooms of House : ', value = 1,min = 1, max =8),
numericInput(inputId='floors', label='Enter floors of House : ', value = 1,min = 1, max = 4),
numericInput(inputId='waterfront', label=' Do you want waterfront in House (Enter 0 for NO and 1 for YES) : ', value = 0,min = 0, max = 1),
numericInput(inputId='condition', label=' Enter view of house (From range  0 to 4): ', value = 0,min = 0, max = 4),
numericInput(inputId='view', label='Enter Condition of house (From range  0 to 5): ', value = 0,min = 0, max = 4),
numericInput(inputId='basement', label=' Do you want basement in House (Enter 0 for NO and 1 for YES) : ', value = 0,min = 0, max = 1),
),
mainPanel(
tags$b("Predicted Price of House"),
verbatimTextOutput("Pred")
)
)
),
tabPanel("Price Prediction",
sidebarLayout(
sidebarPanel(
numericInput(inputId='marla', label='Enter Marla of House : ', value = 2,min = 2, max = 50),
numericInput(inputId='bedrooms', label='Enter bedrooms of House : ' , value = 1,min = 1, max = 9),
numericInput(inputId='bathrooms', label='Enter bathrooms of House : ', value = 1,min = 1, max =8),
numericInput(inputId='floors', label='Enter floors of House : ', value = 1,min = 1, max = 4),
numericInput(inputId='waterfront', label=' Do you want waterfront in House (Enter 0 for NO and 1 for YES) : ', value = 0,min = 0, max = 1),
numericInput(inputId='condition', label=' Enter view of house (From range  0 to 4): ', value = 0,min = 0, max = 4),
numericInput(inputId='view', label='Enter Condition of house (From range  0 to 5): ', value = 0,min = 0, max = 4),
numericInput(inputId='basement', label=' Do you want basement in House (Enter 0 for NO and 1 for YES) : ', value = 0,min = 0, max = 1),
),
mainPanel(
tags$b("Predicted Price of House"),
verbatimTextOutput("Pred")
)
)
)
)
)
server <- function(input, output) {
dataset=Project_Dataset
tprice=0
tprice=as.integer(tprice)
train <- subset(dataset, select=c(price, marla, bedrooms, bathrooms, floors, waterfront, view, condition, basement))
sapply(train, function(x) sum(is.na(x)))
model <-  lm(train$price ~ ., data=train)
cor(train$marla, train$bedrooms+train$bathrooms, method='pearson')
confint(model, conf.level=0.95)
pred <- reactive({
tmarla=input$marla
tbedrooms=input$bedrooms
tbathrooms=input$bathrooms
tfloors=input$floors
twaterfront=input$waterfront
tcondition=input$condition
tview=input$view
tbasement=input$basement
test <- matrix(c(tprice,tmarla, tbedrooms, tbathrooms, tfloors, twaterfront, tview, tcondition, tbasement),ncol=9)
test <- data.frame(test)
colnames(test) <- c("price", "marla", "bedrooms", "bathrooms", "floors", "waterfront", "view", "condition", "basement")
predict(model,test)
})
output$Pred <- renderText(pred())
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(readr)
Project_Dataset <- read_csv("Project_Dataset.csv")
View(Project_Dataset)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Practice2')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Practice2')
runApp('~/Practice2')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
library(askpass)
library(ggplot2)
shiny::runApp()
install.packages("ggplot2")
shiny::runApp()
shiny::runApp()
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
library(shiny)
library(shinythemes)
library(MASS)
library(dplyr)
library(Hmisc)
library(psych)
library(corrplot)
library(ggplot2)
library(readr)
Project_Dataset <- read_csv("Project_Dataset.csv")
View(Project_Dataset)
runApp('~/Practice2')
runApp()
install.packages("ggplot2")
library(readr)
Project_Dataset <- read_csv("Project_Dataset.csv")
View(Project_Dataset)
library(shiny)
library(shinythemes)
library(MASS)
library(dplyr)
library(Hmisc)
library(psych)
library(corrplot)
library(ggplot2)
library(MASS)
library(dplyr)
library(car)
# Create index16, pointing to 16-week chicks
index16 <- which(ChickWeight$Time == 16)
# Get the 16-week chick weights
weights <- ChickWeight$weight[index16]
weights
# Show the normal QQ-plot of the chick weights
qqPlot(weights)
? qqPlot
# Show the normal QQ-plot of the Boston$tax data
qqPlot(Boston$tax)
Boston %>% head
plot(rad ~ zn, data = Boston)
head(Cars93)
head(mtcars)
# Compute max_hp
max_hp <- max(Cars93$Horsepower, mtcars$hp)
# Compute max_mpg
max_mpg <- max(Cars93$MPG.city, Cars93$MPG.highway, mtcars$mpg)
plot(Cars93$Horsepower, Cars93$MPG.city,
type = "n",
xlim = c(0, max_hp),
ylim = c(0, max_mpg),
xlab = "Horsepower",
ylab = "Miles per gallon")
# Add open circles to plot
points(mtcars$hp, mtcars$mpg, pch = 1)
# Add solid squares to plot
points(Cars93$Horsepower, Cars93$MPG.city, pch = 15)
# Add open triangles to plot
points(Cars93$Horsepower, Cars93$MPG.highway, pch = 6)
# Load the car package to make qqPlot() available
library(car)
# Create index16, pointing to 16-week chicks
head(ChickWeight)
par(mfrow = c(1,2))
index16 <- which(ChickWeight$Time == 16)
index16
# Get the 16-week chick weights
weights <- ChickWeight$weight[index16]
weights
# Plot the normalized histogram
truehist(weights)
# Add the density curve to the histogram
lines(density(weights))
runApp()
install.packages("ggplot2")
shiny::runApp()
library(readr)
Project_Dataset <- read_csv("Project_Dataset.csv")
View(Project_Dataset)
runApp()
runApp()
head(ChickWeight)
par(mfrow = c(1,2))
index16 <- which(ChickWeight$Time == 16)
index16
# Get the 16-week chick weights
weights <- ChickWeight$weight[index16]
weights
# Plot the normalized histogram
truehist(weights)
# Add the density curve to the histogram
lines(density(weights))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data=Project_Dataset
index=wich.max(data$price)
data$price[index
index=wich.max(data$price)
data$price[index]
index=wich.max(data$price)
index=which.max(data$price)
data$price[index]
runApp()
data=Project_Dataset
index=which(data$price>100000000)
data$price[index]
## ------------------------------------------------------------------------
Project_Dataset=Project_Dataset[-c(index,)]
## ------------------------------------------------------------------------
Project_Dataset=Project_Dataset[-c(index),]
data=Project_Dataset
data$price[index]
data=Project_Dataset
index=which(data$price>100000000)
data$price[index]
dataset=Project_Dataset
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(readr)
Project_Dataset <- read_csv("Project_Dataset.csv")
View(Project_Dataset)
runApp()
data=Project_Dataset
index=which(data$price>100000000)
data$price[index]
Project_Dataset=Project_Dataset[-c(index),]
data=Project_Dataset
index=which(data$price>100000000)
data$price[index]
runApp()
library(readr)
Project_Dataset <- read_csv("Project_Dataset.csv")
View(Project_Dataset)
shiny::runApp()
data=Project_Dataset
index=which(data$price>100000000)
data$price[index]
Project_Dataset=Project_Dataset[-c(index),]
index=which(data$price>100000000)
data$price[index]
Project_Dataset=Project_Dataset[-c(index),]
data$price[index]
Project_Dataset=Project_Dataset[-c(index),]
Project_Dataset=Project_Dataset[-c(index),]
data=Project_Dataset
index=which(data$price>100000000)
data$price[index]
index=which(data$price>100000000)
data$price[index]
runApp()
runApp()
